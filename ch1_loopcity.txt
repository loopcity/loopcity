1. Loop City:  An Introduction

When Linus Torvalds created the Linux kernel operating system, he didn’t anticipate having to manage thousands of contributions the open source software.  To quote, “Git is my second big project, created only for me to maintain my first big project.”  Versioning software is just one way to keep loops from becoming knots—it’s a command line tool that manages a history of changes on a linear timeline.  

Although the repository won’t read binary files, think for example of a digital image as a stand-in for an algorithmic script.  When you modify an image in Photoshop, you save the entire image—flattened or layered—not just the airbrushed gesture.  Versioning software on the other hand, and Torvalds’ GitHub in particular, archives the layer of airbrushed touch-ups alone, and compares modifications to the previous version side by side, like toggling undo/redo through your Photoshop history.  GitHub also manages parallel timelines of branching histories.  So basically if you have an impatient editor breathing down the neck of your workflow, he doesn’t have to download entire RAW files, but could just call Git and pull an update.  Like a melody summoned to mind, GitHub holds that shared loop and can tweak the individual notes one by one.  It’s rather like a symphony of Cory Arcangel cat videos, with distributed users—or unsuspecting cats—each voluntarily hitting a single key.

An alternate metaphor.  GitHub collates the accumulating loops in a knowledge base rather like the Wikipedia community, which could be better described by Linus’s Law, formulated by Eric S. Raymond in his book The Cathedral and the Bazaar. (1999).[1][2]  True to form, Wikipedia brings us the condensed version:

	The law states that ‘given enough eyeballs, all bugs are shallow’; or more 		formally: ‘Given a large enough beta-tester and co-developer base, almost 	every problem will be characterized quickly and the fix will be obvious to 		someone.’  Presenting the code to multiple developers with the purpose of 	reaching consensus about its acceptance is a simple form of software 		reviewing. 

If Git did the same for art as it does for code, all we’d be seeing is social realism.  Hopefully art doesn’t want to meet a consensus.  It’s the knot that puts terms back into circulation, and leaves the loop open to interpretation.  Personally, I’d trade my punchcard for twisted models and upbraided logic to feed a discursive weft back into loom’s smooth weave.  Indeed the mechanics are implicated in the history of computing, but materially I don’t believe a pure loop can persist in the natural world—it inevitably becomes entangled, both with itself and the linear processes upon its path.  Chief of which is entropy, anyway you look at it.  Likewise, the networked experience of contemporary media and the crisis of digital images is exactly as such—the copy set free from it’s original—and images circulating with a half-life decay.  Hito Steyerl speaks the inevitable decay in her essay In Defense of the Poor Image:

	The poor image is a copy in motion. Its quality is bad, its resolution 			substandard. As it accelerates, it deteriorates. It is a ghost of an image, a 		preview, a thumbnail, an errant idea, an itinerant image distributed for free, 	squeezed through slow digital connections, compressed, reproduced, ripped, 	remixed, as well as copied and pasted into other channels of distribution. p32

Her looping “swarm circulation” p44 is taken as given, yet in Benjaminian terms, the “aura is no longer based on the permanence of the ‘original,’ but on the transience of the copy.” p42  Which can be fleeting, to say the least.  Yet bracketed between these known conditions, histories, and the internet of things, contemporary art finds itself wrangling with the terms of big data.  Likewise bound in a loop of representation, where effects are easy and circulation is taken for granted, what is valued as content?  While the loop says “why not,” the question posed to the knot is “how?”  Form may well follow function, but sublimity is something else.

We render the world that immanently surrounds us, and not only with fine brushes and pristine objects, so it should seem no surprise that the self-reflexive representations of digital networks are likewise informed by pixel based content and plug-in tools.  Compression artifacts may well consecrate an digital image’s history of being “reproduced, ripped, remixed […] uploaded, downloaded, shared, reformatted, [and] reedited” as Steyerl would have it, but unlike her poor image copy, memory employs the loop as a constructive tool.  Say you have a song repeating in your head—it’s skipping like a record—but the full sequence is broken.  The loop of memory is what enables you to fall into the song’s general rhythm and reconstruct patterns with mere fragments.  This nonlinear recursion makes memory—and thought as a whole—more like disentangling a knot than a mechanical parallelism of time.  

At a computational linguistics talk at Queen Mary University, Geraint Wiggins offered a definition of music in as the pleasurable anticipation of the unexpected, from within an established rhythm.  You might call it improvisation, where the deviations generally aren’t too far from the main rhythmic structure, under the special condition that the initial experience of surprise is fully integrated into your memory of the sequence.  A mechanical loop might again be described as having no memory, whereas the algorithmic script running in a loop might quantify the texture of experience into subsurface meta-data.  Are these all textures and layers in depth not more akin to a knot?

The algorithm is simply stated as a series of executable steps in a process.
Although bifurcated as two distinct species of thought, both pure loop and practical knot can each employ an algorithmic approach to generating form.  Natural processes such as tide cycles are bounded by algorithmic constraints.  The Thames River’s steady ebb and flow is itself a natural loop—a pure sine in lunar time—but the material that falls upon its path responds as if the river’s script is crunching data.  Programming is the juncture of conceptual thought hitting the dirt of user input, which is another way of saying a looping structure can process just about anything if it’s codified properly—even if it renders a discursive knot.  If coding is the compression of possibility, I take the knot as the critical foundation of contemporary visuality. 

Case in point: the internet is one giant knot.  Or more acutely, our multimedia digital experience is the circulation of nested scripts—executables that fashion the point and click environment through connective nodes.  ‘Loop the loop’ ad infinitum enables the shared hyperlink experience, by nature colonizing peripheral territories.  Simple call and response functionality resolves iterative tasks into software, but the combinatorial effect means we can all customize our own corner of the universe under the same frontend assembly.  So basically, the internet is a giant readymade.  

My vision is entirely distinct from my historicization; Duchamp’s readymades mark the introduction of the loop into the mirror of symbolic representation.  Practically speaking, programmers employ scripts as readymade tools—prebuilt software is taken as given.  Piecewise frameworks and archived libraries abstract the essential 1’s and 0’s so that development—and creativity moreover—can be focused at the intersection and interpretation of their symbolic containers. 

Duchamp takes the familiar urinal, and reorienting top and bottom via the signature of R. Mutt, transforms the cold porcelain into a work of art.  But the real work occurs in mind.  The perspectival shift of readymades in general—or a condition of “art-in-general” as Thierry de Duve calls it—applies the conceptual rule to a matrix of objects.  Substitute data points for pre-transformed readymades in an operational matrix, and the conceptual process reads equivalent to algorithmic scripting.  This may sound like an oversimplification, but Duchamp’s gesture put symbols back into play, a loop if you will, conceptually formulated to counter what he called “retinal art.”  

The readymades carry not only a discreet inheritance of object functionality, but are also a material source for the puns and looped wordplay Duchamp was so keen to exploit.  Duchamp concretized the surrealist gesture his contemporaries would later expound in language—a given set of rules which inform many strategies of 60’s conceptualism.  Where as polyvariable encoding is the fluid form of poetry, declaring such relations in physical space calls that whole sequence of connections into question.  We could debate what is an isn’t a pipe in René Magritte’s famous The Treachery of Images, but I want to take a step back and recontextualize the operative conceptualism in relation to modern computing.

Charles Babbage’s Analytical Engine was invented nearly a century before it was able to produce results.  In essence Babbage took the punchcards of mechanical jacquard looms as a readymade tool to process new data—borrowing is just sort of the way invention works.  Much akin to creativity in Duchampian terms—reinventing objects in the same way Silicon Valley reappropriates data is exactly where we rethink our relationship to both our immediate senses and the greater outside world.  

Is creativity in general a set process for sifting a looped flood of information?  Most certainly not.  But the ability to script an order of operations—whether immersed in the acausal intuition of artistic process or coldly detached from the pulse of positive and negative charges inscribed upon a spinning disk—the abstract interplay of polynomial function is essential to conceptual thought.  Today with communication networks firmly in place, data is the pure material.  Quantifiable behaviours are the gold of anticipating consumer desire, if only the proper tools be set in place to parse the numbers.

The following sequence of chapters are just one take on creative thinking, rooted at the core in the loop and its practical _____, the knot.






 and replicate computing tables in 1906

\\\\\\

From a looping stream of operational logic, flexible frameworks may appear counterintuitive to optimization, but they are in fact the generative structures that harness flow and link connective nodes.
